I would like to completely overhaul the CSS styles applied to the html file code shown below.

This web page needs to look better for use on mobile phone devices.

Currently, the main form is displayed in the center of a portrait mode screen. 
This means, the form and input field are restricted by the standard on-screen keyboard when trying to input text into the sign in/out.
I want the form to be displayed higer up the screen, so that the on-screen keyboard does not cover the input field when it is displayed.

The simple header/menu bar needs to be relatively thin, and it absolutely must span the width of the screen, without needing to expand due to text being too large.
The menu bar contains 3 sections in a single row.
text in the left section needs to align left, and be close to the left hand sife of the screen.
text in the right section needs to align right, and be close to the right hand sife of the screen.
text in the center section needs to align center, and there should be sufficient space between all 3 sections so the menu is easy to read.
smaller text is better, to avoid word wrapping and unwelcome expansion of the menu bar. But it should be readable for mobile users also.

Can you re-write all of the CSS styles in the example main html file below, to meet these requirements.
Colours should be distinctive and modern looking, but not too bright or garish.
the menu bar should contrast with the background colour of the main form, so that it is easy to see and read.


the main html file currently contains:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>sign-in-out</title>
  <link rel="stylesheet" href="https://unpkg.com/picnic">
  <link rel="icon" type="image/png" sizes="32x32" href="faviconV2.png">
  <style>
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      background: linear-gradient(135deg, #6a11cb, #2575fc);
      color: white;
      font-family: Arial, sans-serif;
      text-align: center;
    }
    .container {
      max-width: 400px;
      padding: 20px;
      background: white;
      border-radius: 10px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
      color: black;
    }
    .hidden {
      display: none;
    }
    .spinner {
      border: 4px solid rgba(0, 0, 0, 0.1);
      border-left-color: #6a11cb;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
      margin: 20px auto;
    }
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }

    /* Updated styles for the dropdown */
    .dropdown {
      position: absolute;
      background: white;
      color: black;
      list-style: none;
      padding: 0;
      margin: 0;
      border: 1px solid #ccc;
      width: 100%;
      max-height: 150px;
      overflow-y: auto;
      z-index: 1000;
      border-radius: 5px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .dropdown-item {
      padding: 10px;
      cursor: pointer;
    }

    .dropdown-item:hover,
    .dropdown-item.active {
      background: #6a11cb;
      color: white;
    }

    .highlight {
      font-weight: bold;
      color: #6a11cb;
    }
  </style>
</head>
<body>
  <div class="container">
    <div id="header-container"></div>
    <h1 id="message"></h1>
    <form id="signForm" class="hidden">
      <input type="text" id="nameInput" placeholder="Enter your name" autocomplete="off">
      <button type="button" id="clearName">Clear Name</button>
      <input type="hidden" id="activityId" value="sorrento_youth_sunday">
      <input type="hidden" id="direction">
      <input type="hidden" id="nameId">
      <button type="submit" id="submitButton"></button>
    </form>
    <div id="spinner" class="spinner hidden"></div>
  </div>

  <script>
    const API_BASE = "https://5eifrv56p8.execute-api.ap-southeast-2.amazonaws.com";
    const ACTIVITY_ID = "sorrento_youth_sunday";
    let IN_START_TIME = convertTimeStringToDateObj("08:00");
    let OUT_START_TIME = convertTimeStringToDateObj("09:30");
    let END_TIME = convertTimeStringToDateObj("10:40");

    const messageEl = document.getElementById("message");
    const formEl = document.getElementById("signForm");
    const spinnerEl = document.getElementById("spinner");
    const nameInput = document.getElementById("nameInput");
    const clearNameButton = document.getElementById("clearName");
    const directionInput = document.getElementById("direction");
    const nameIdInput = document.getElementById("nameId");
    const submitButton = document.getElementById("submitButton");

    // inject ./header.snippet
    fetch('./header.snippet')
      .then(response => response.text())
      .then(data => {
        document.getElementById('header-container').innerHTML = data;
      })
      .catch(error => console.error('Header load error:', error));

    // Utility to convert human readable time strings to date object.
    function convertTimeStringToDateObj(timeString) {
      const [hours, minutes] = timeString.split(":").map(Number);
      const now = new Date();
      now.setHours(hours, minutes, 0, 0);
      return now;
    }

    // Utility to parse URL parameters
    function getUrlParameter(name) {
      const params = new URLSearchParams(window.location.search);
      return params.get(name);
    }

    // Utility to check if today is Sunday
    function isSunday() {
      const enableTestMode = false;
      if (enableTestMode) {
        return true;  // For testing purposes, always return true
      } else {
         return new Date().getDay() === 0;
      }
    }

    // Utility to calculate the next Sunday
    function getNextSunday() {
      const now = new Date();
      const daysUntilSunday = (7 - now.getDay()) % 7;
      const nextSunday = new Date(now);
      nextSunday.setDate(now.getDate() + daysUntilSunday);
      return nextSunday.toLocaleDateString("en-GB", { day: "2-digit", month: "short", year: "numeric" });
    }

    // Fetch valid names from the backend
    async function fetchNames() {
      const response = await fetch(`${API_BASE}/name?activity_id=${ACTIVITY_ID}`);
      return response.json();
    }

    // Add log entry to the backend
    async function addLog(nameId, direction) {
      const payload = {
        activity_id: ACTIVITY_ID,
        name_id: nameId,
        direction: direction,
        date_time: new Date().toISOString()
      };

      const response = await fetch(`${API_BASE}/log`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      });

      return response.json();
    }

    // Initialize the page
    function init() {
      const now = new Date();
      const enableTestMode = false;
      if (enableTestMode) {
        const testParam = getUrlParameter("test");

        if (testParam === "in") {
          IN_START_TIME = new Date(now.getTime() - 10 * 60 * 1000); // Override IN_START_TIME with current time - 10minutes
          OUT_START_TIME = new Date(now.getTime() + 10 * 60 * 1000); // Override OUT_START_TIME with current time + 10 minutes
          END_TIME = new Date(now.getTime() + 20 * 60 * 1000); // Override END_TIME with current time + 20minutes
        }
        if (testParam === "out") {
          IN_START_TIME = new Date(now.getTime() - 20 * 60 * 1000); // Override IN_START_TIME with current time - 10minutes
          OUT_START_TIME = new Date(now.getTime() - 10 * 60 * 1000); // Override OUT_START_TIME with current time + 10 minutes
          END_TIME = new Date(now.getTime() + 20 * 60 * 1000); // Override END_TIME with current time + 20minutes
        }
      }

      if (!isSunday() || now > END_TIME) {
        messageEl.textContent = `The next session is ${getNextSunday()}`;
        return;
      }

      if (now < IN_START_TIME) {
        messageEl.textContent = `Sign in starts at ${IN_START_TIME}`;
        return;
      }

      if (now >= IN_START_TIME && now < OUT_START_TIME) {
        setupForm("in");
        return;
      }

      if (now >= OUT_START_TIME && now < END_TIME) {
        setupForm("out");
        return;
      }
    }

    // Setup the form for sign-in or sign-out
    async function setupForm(direction) {
      //messageEl.textContent = direction === "in" ? "Sign In" : "Sign Out";
      messageEl.textContent = "";  // don't display a message, button text is enough
      submitButton.textContent = direction === "in" ? "Sign In" : "Sign Out";
      formEl.classList.remove("hidden");
      directionInput.value = direction;

      const savedName = localStorage.getItem("name");
      if (savedName) {
        nameInput.value = savedName;
      }

      const dropdown = document.createElement("ul");
      dropdown.classList.add("dropdown", "hidden");
      formEl.appendChild(dropdown);

      const names = (await fetchNames()).names || [];

      // Debounce function to limit filtering frequency
      function debounce(func, delay) {
        let timeout;
        return (...args) => {
          clearTimeout(timeout);
          timeout = setTimeout(() => func(...args), delay);
        };
      }

      // Filter and display matching names
      function filterNames() {
        const inputValue = nameInput.value.toLowerCase();
        const matches = names.filter(name => name.display.toLowerCase().includes(inputValue));

        dropdown.innerHTML = ""; // Clear previous suggestions
        if (matches.length > 0 && inputValue) {
          matches.forEach((match, index) => {
            const item = document.createElement("li");
            item.classList.add("dropdown-item");
            item.innerHTML = match.display.replace(
              new RegExp(inputValue, "gi"),
              match => `<span class="highlight">${match}</span>`
            );

            item.addEventListener("click", () => {
              nameInput.value = match.display;
              nameIdInput.value = match.name_id;
              dropdown.classList.add("hidden");
            });

            dropdown.appendChild(item);
          });
          dropdown.classList.remove("hidden");
        } else {
          dropdown.classList.add("hidden");
        }
      }

      // Add event listeners
      nameInput.addEventListener("input", debounce(filterNames, 300));
      nameInput.addEventListener("blur", () => {
        setTimeout(() => dropdown.classList.add("hidden"), 200);
      });
      nameInput.addEventListener("focus", () => {
        if (dropdown.children.length > 0) {
          dropdown.classList.remove("hidden");
        }
      });

      // Keyboard navigation
      nameInput.addEventListener("keydown", (e) => {
        const items = dropdown.querySelectorAll(".dropdown-item");
        let activeIndex = Array.from(items).findIndex(item => item.classList.contains("active"));

        if (e.key === "ArrowDown") {
          e.preventDefault();
          if (activeIndex < items.length - 1) {
            if (activeIndex >= 0) items[activeIndex].classList.remove("active");
            items[++activeIndex].classList.add("active");
          }
        } else if (e.key === "ArrowUp") {
          e.preventDefault();
          if (activeIndex > 0) {
            items[activeIndex].classList.remove("active");
            items[--activeIndex].classList.add("active");
          }
        } else if (e.key === "Enter" && activeIndex >= 0) {
          e.preventDefault();
          items[activeIndex].click();
        }
      });
    }

    // Handle form submission
    formEl.addEventListener("submit", async (e) => {
      e.preventDefault();
      spinnerEl.classList.remove("hidden");

      const nameId = nameIdInput.value;
      const direction = directionInput.value;

      try {
        const result = await addLog(nameId, direction);
        alert(result.message || "Success!");
        localStorage.setItem("name", nameInput.value);
      } catch (error) {
        alert("Error: " + error.message);
      } finally {
        spinnerEl.classList.add("hidden");
      }
    });

    // Clear saved name
    clearNameButton.addEventListener("click", () => {
      localStorage.removeItem("name");
      nameInput.value = "";
    });

    // Initialize the page on load
    init();
  </script>
</body>
</html>



Note, the html code that currently gets added via the header.snippet file:
<div class="menu-header">
  <div class="menu-left"><a href="./index.html">sign</a></div>
  <div class="menu-center">youth</div>
  <div class="menu-right"><a href="./live.html">live</a></div>
</div>

<style>
  .menu-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: black;
    color: white;
    padding: 10px 20px;
    font-family: Arial, sans-serif;
    font-size: 1.2em;
    width: 100%;
    box-sizing: border-box;
  }

  .menu-header a {
    color: white;
    text-decoration: underline;
  }

  .menu-left,
  .menu-center,
  .menu-right {
    flex: 1;
    padding: 0px 20px;
  }

  .menu-left {
    text-align: left;
  }

  .menu-center {
    text-align: center;
    text-decoration: none;
  }

  .menu-right {
    text-align: right;
  }

  @media (max-width: 600px) {
    .menu-header {
      flex-direction: column;
      text-align: center;
    }

    .menu-left,
    .menu-center,
    .menu-right {
      text-align: center;
      padding: 5px 0;
    }
  }
</style>
