I want live.template.html to be SPA website, which will be hosted in an AWS S3 bucket.
dynamodb.tf contains terraform showing insertion of a record into 2 tables, Log and Names.
index.template.html contains eamples of using these 2 tables, as well as many variables and template 
codes that need to be repeated in the new file.
logs.html and names.html also show examples of fetching data from these dynamo tables.

Using the exact attribute names for Log & Names tables in dynamodb.tf, please create a
live.template.html file that meets all of the following requirements:

- must be mobile-first (i.e. users will only ever use this page on a mobile web broswer).
- must be very user friendly, one simple message or function display at any one time
- must use a modern lightweight CSS framework such as "picnic"
- use visuals, smooth transitions and a colour schem that appears to teenagers
- use javascript to call backend functions, based on the example functions further below.
- use javascript functions to manage page display and layout, using constants further below.
- add lots of comments so the code is easy to understand and maintain

live.template.html usage:
This page will display a live counter and a list of names to the user/viewer.
The page should fetch all records from Names table for given activity_id. 
Names only have to be fetched once.
Every 15 seconds, the page should fetch all records from Log for LOG_DATE_STRING.

Create a variable called live_total and set it using the following calculation:
- live_total = total unique name_id entries where direction=in - total uniue name_id entries where direction=out.
- if live_total should be set to 0 if calculation returns a negative number

The top, center of the page should display value of variable live_total in very large text (about 20% of page height)
Immediately below live_total, display the message "people present, as of <current time as HH:MM:SS>", in regular size text (about 18px)

Below the message, insert a horizontal line.

Below the line, display a series of buttons, to control filtering of the data in the 2x2 table below.
The series of buttons should be diplayed on the same line if possible, or wrapped if needed. use small 
or medium size tet for these buttons.
Using the filter values from list of names, create 1 button for each unique filter value. 
There should be no duplicate filter buttons. Also create 1 button called "all", and place this as the first button in the list.

Whenever one of these buttons is clicked, the visibility of the names in the 2x2 table should be toggled accordingly.
for example, if "all" is clicked, then all names should be visible.
if a button called "u15" is clicked, then only names with a filter value = "u15" should be visible

Below the message, display a 2 x 2 table as follows:
row 1, column headers: IN | OUT
row 2, IN column - list of all unique name_id from Log where direction="in". 
  - Log.name_id should be matched to the Names.display value for the same name_id
  - names should be sorted alphabetically, 1 per line, using <br /> within the  
  - Names.filter should be used for each name to support button/visibility functionality
row 2, OUT column - list of all unique name_id from Log where direction="out". 
  - Log.name_id should be matched to the Names.display value for the same name_id
  - names should be sorted alphabetically, 1 per line, using <br /> within the  
  - Names.filter should be used for each name to support button/visibility functionality

Just like the example in logs.html, this html file should accept a parameter called 'date', 
to support testing functionality.
But, I only want to enable this test functionality using INJECT_ENABLE_TEST_MODE, as demonstrated in index.template.html

Functionality needed:
on page load, call fetchNames() for the current date

If the current day is not sunday 
- calculate the date for the next sunday.
- display a large, centered message: The next session is <dd/mmm/yyyy>
- stop processing 


Example function calls:
# Get logs for a given date.
fetchLogs() {
      const response = await fetch(`${API_BASE}/log?activity_id=sorrento_youth_sunday&date=2025-08-12`)
}

# get list of valid names that are allowed to sign in, along with a filter value (e.g. u14, u15, u17, u19)
async function fetchNames() {
      const response = await fetch(`${API_BASE}/name?activity_id=sorrento_youth_sunday`);
      const data = await response.json();
}

provides:
${name.name_id}  //use this value to match Log.name_id to Names.display
${name.display}  //use this value for display each name
${name.filter}   //use this value for filter buttons
