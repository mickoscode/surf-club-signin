I would like to completely overhaul the CSS styles applied to the html file code shown below.

This web page needs to look better for use on mobile phone devices.

Currently, the live counter has too much padding above and below, which leaves too much VideoColorSpace, and pushes other content down too low.
Another problem is excessive padding above the first row in the list of display names in the bottom table. This dead space should be removed.

The simple header/menu bar needs to be relatively thin, and it absolutely must span the width of the screen, without needing to expand due to text being too large.
The menu bar contains 3 sections in a single row.
text in the left section needs to align left, and be close to the left hand sife of the screen.
text in the right section needs to align right, and be close to the right hand sife of the screen.
text in the center section needs to align center, and there should be sufficient space between all 3 sections so the menu is easy to read.
smaller text is better, to avoid word wrapping and unwelcome expansion of the menu bar. But it should be readable for mobile users also.

Can you re-write all of the CSS styles in the example main html file below, to meet these requirements.
Colours should be distinctive and modern looking, but not too bright or garish.
the menu bar should contrast with the background colour of the main form, so that it is easy to see and read.


the main html file currently contains:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Live Counter</title>
  <link rel="stylesheet" href="https://unpkg.com/picnic">
  <link rel="icon" type="image/png" sizes="32x32" href="faviconV2.png">
  <style>
    body {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
      background: linear-gradient(135deg, #ff7eb3, #ff758c);
      color: white;
      font-family: Arial, sans-serif;
      text-align: center;
      margin: 0;
    }
    .live-total {
      font-size: 20vh;
      font-weight: bold;
      margin: 0; /* Remove margin */
    }
    .message {
      font-size: 18px;
      margin: 5px 0; /* Reduce top and bottom margin */
    }
    .buttons {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      margin: 10px 0;
    }
    .buttons button {
      margin: 5px;
      padding: 10px 15px;
      border: none;
      border-radius: 5px;
      background: #ff758c;
      color: white;
      cursor: pointer;
      transition: background 0.3s;
    }
    .buttons button:hover {
      background: #ff4a6e;
    }
    table {
      width: 90%;
      margin-top: 20px;
      border-collapse: collapse;
    }
    th, td {
      border: 1px solid white;
      padding: 10px;
      text-align: center;
    }
    th {
      background: #ff4a6e;
    }
    .hidden {
      display: none;
    }

    /* Remove borders from nested tables */
    .nested-table {
      border: none;
      width: 100%;
    }

    .nested-table td {
      border: none;
      padding: 0;
    }

    /* Align nested tables to the top of their parent cells */
    td {
      vertical-align: top;
    }
  </style>
</head>
<body>
  <div id="header-container"></div>
  <h2 class="live-total" id="liveTotal">0</h2>
  <p class="message" id="liveMessage">people present, as of --:--:--</p>
  <hr>
  <div class="buttons" id="filterButtons"></div>
  <table>
    <thead>
      <tr>
        <th>IN</th>
        <th>OUT</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td id="inColumn">
          <table class="nested-table">
            <tbody id="inNestedTable"></tbody>
          </table>
        </td>
        <td id="outColumn">
          <table class="nested-table">
            <tbody id="outNestedTable"></tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>

  <script>
    const API_BASE = "https://5eifrv56p8.execute-api.ap-southeast-2.amazonaws.com";
    const ACTIVITY_ID = "sorrento_youth_sunday";
    const enableTestMode = false;
    let LOG_DATE_STRING = new Date().toISOString().split('T')[0]; // Default to today
    let liveTotal = 0;
    let names = [];
    let logs = [];

    // inject ./header.snippet
    fetch('./header.snippet')
      .then(response => response.text())
      .then(data => {
        document.getElementById('header-container').innerHTML = data;
      })
      .catch(error => console.error('Header load error:', error));

    // Utility to parse URL parameters
    function getUrlParameter(name) {
      const params = new URLSearchParams(window.location.search);
      return params.get(name);
    }

    // Utility to check if today is Sunday
    function isSunday() {
      if (enableTestMode) return true; // For testing purposes
      return new Date().getDay() === 0;
    }

    // Utility to calculate the next Sunday
    function getNextSunday() {
      const now = new Date();
      const daysUntilSunday = (7 - now.getDay()) % 7;
      const nextSunday = new Date(now);
      nextSunday.setDate(now.getDate() + daysUntilSunday);
      return nextSunday.toLocaleDateString("en-GB", { day: "2-digit", month: "short", year: "numeric" });
    }

    // Fetch names from the backend
    async function fetchNames() {
      const response = await fetch(`${API_BASE}/name?activity_id=${ACTIVITY_ID}`);
      const data = await response.json();
      names = data.names || [];
      renderFilterButtons();
    }

    // Fetch logs from the backend
    async function fetchLogs() {
      const response = await fetch(`${API_BASE}/log?activity_id=${ACTIVITY_ID}&date=${LOG_DATE_STRING}`);
      const data = await response.json();
      logs = data.logs || [];
      calculateLiveTotal();
      renderTable();

      // Schedule the next fetch after the current one completes
      setTimeout(fetchLogs, 30000); // every 30 seconds
    }

    // Utility to filter logs with valid name_id
    function filterValidLogs(logs) {
      const validNameIds = new Set(names.map(name => name.name_id));
      return logs.filter(log => validNameIds.has(log.name_id));
    }

    // Calculate live total
    function calculateLiveTotal() {
      const validLogs = filterValidLogs(logs); // Filter invalid logs
      const inEntries = new Set(validLogs.filter(log => log.direction === "in").map(log => log.name_id));
      const outEntries = new Set(validLogs.filter(log => log.direction === "out").map(log => log.name_id));
      liveTotal = Math.max(0, inEntries.size - outEntries.size);
      updateLiveTotalDisplay();
    }

    // Update live total display
    function updateLiveTotalDisplay() {
      const now = new Date();
      const timeString = now.toTimeString().split(" ")[0];
      document.getElementById("liveTotal").textContent = liveTotal;
      document.getElementById("liveMessage").textContent = `people present, as of ${timeString}`;
    }

    // Render filter buttons
    function renderFilterButtons() {
      const filters = Array.from(new Set(names.map(name => name.filter))).sort();
      const buttonsContainer = document.getElementById("filterButtons");
      buttonsContainer.innerHTML = "";

      // Add "all" button
      const allButton = document.createElement("button");
      allButton.textContent = "All";
      allButton.onclick = () => filterTable("all");
      buttonsContainer.appendChild(allButton);

      // Add filter-specific buttons
      filters.forEach(filter => {
        const button = document.createElement("button");
        button.textContent = filter;
        button.onclick = () => filterTable(filter);
        buttonsContainer.appendChild(button);
      });
    }

    // Render table
    function renderTable() {
      const validLogs = filterValidLogs(logs); // Filter invalid logs
      const inNestedTable = document.getElementById("inNestedTable");
      const outNestedTable = document.getElementById("outNestedTable");

      // Helper function to remove duplicates based on name_id
      function removeDuplicates(logs) {
        const seen = new Set();
        return logs.filter(log => {
          if (seen.has(log.name_id)) {
            return false;
          }
          seen.add(log.name_id);
          return true;
        });
      }

      const inLogs = removeDuplicates(validLogs.filter(log => log.direction === "in"));
      const outLogs = removeDuplicates(validLogs.filter(log => log.direction === "out"));

      const inNames = inLogs
        .map(log => names.find(name => name.name_id === log.name_id))
        .filter(Boolean)
        .sort((a, b) => a.display.localeCompare(b.display));

      const outNames = outLogs
        .map(log => names.find(name => name.name_id === log.name_id))
        .filter(Boolean)
        .sort((a, b) => a.display.localeCompare(b.display));

      // Clear existing rows
      inNestedTable.innerHTML = "";
      outNestedTable.innerHTML = "";

      // Populate nested tables
      inNames.forEach(name => {
        const row = document.createElement("tr");
        row.classList.add(`filter-${name.filter}`);
        const cell = document.createElement("td");
        cell.textContent = name.display;
        row.appendChild(cell);
        inNestedTable.appendChild(row);
      });

      outNames.forEach(name => {
        const row = document.createElement("tr");
        row.classList.add(`filter-${name.filter}`);
        const cell = document.createElement("td");
        cell.textContent = name.display;
        row.appendChild(cell);
        outNestedTable.appendChild(row);
      });
    }

    // Filter table based on filter value
    function filterTable(filter) {
      const allRows = document.querySelectorAll("[class^='filter-']");
      allRows.forEach(row => row.classList.remove("hidden"));

      if (filter !== "all") {
        allRows.forEach(row => {
          if (!row.classList.contains(`filter-${filter}`)) {
            row.classList.add("hidden");
          }
        });
      }
    }

    // Initialize the page
    async function init() {
      if (enableTestMode) {
        const testDate = getUrlParameter("date");
        if (testDate && /^\d{4}-\d{2}-\d{2}$/.test(testDate)) {
          LOG_DATE_STRING = testDate;
        }
      }

      if (!isSunday()) {
        const nextSunday = getNextSunday();
        document.body.innerHTML = `<h1 style="font-size: 24px; text-align: center;">The next session is ${nextSunday}</h1>`;
        return;
      }

      await fetchNames();
      fetchLogs(); // Start the first fetch
    }

    // Initialize the page on load
    init();
  </script>
</body>
</html>


Note, the html code that currently gets added via the header.snippet file:
<div class="menu-header">
  <div class="menu-left"><a href="./index.html">sign</a></div>
  <div class="menu-center">youth</div>
  <div class="menu-right"><a href="./live.html">live</a></div>
</div>

<style>
  .menu-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: black;
    color: white;
    padding: 10px 20px;
    font-family: Arial, sans-serif;
    font-size: 1.2em;
    width: 100%;
    box-sizing: border-box;
  }

  .menu-header a {
    color: white;
    text-decoration: underline;
  }

  .menu-left,
  .menu-center,
  .menu-right {
    flex: 1;
    padding: 0px 20px;
  }

  .menu-left {
    text-align: left;
  }

  .menu-center {
    text-align: center;
    text-decoration: none;
  }

  .menu-right {
    text-align: right;
  }

  @media (max-width: 600px) {
    .menu-header {
      flex-direction: column;
      text-align: center;
    }

    .menu-left,
    .menu-center,
    .menu-right {
      text-align: center;
      padding: 5px 0;
    }
  }
</style>
