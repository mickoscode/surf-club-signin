I want index.html to be SPA website, which will be hosted in an AWS S3 bucket.
dynamodb.tf contains terraform to create a table called Log, as well as insert a sample record.

Using the exact attribute names for the Log table and log_sample item in dynamodb.tf, please create an index.html file that meets all of the following requirements:

- must be mobile-first (i.e. users will only ever use this page on a mobile web broswer).
- must be very user friendly, one simple message or function display at any one time
- must use a modern lightweight CSS framework such as "picnic"
- use visuals, smooth transitions and a colour schem that appears to teenagers
- use javascript to call backend functions, based on the example functions below.

index.html usage:
This web page will be used to sign in and out of an activity.

Functionality needed:

I want the index.html to be focused on the user experience of signing in and out of an activity. The activity runs from 8am to 10.40am each Sunday. If the current date and time is not Sunday, between these hours, the page should display a simple mobile friendly message to say "the next session will start at 8am on <date>". Where <date> is the next Sunday from current date. For the rest of the functionality, we assume the current day is a Sunday. If the time is between 8am and 9.30am, the sign-in form should be displayed. If the time is between 9.31am and 10.40am, the sign-out form should be displayed. The 2 forms are almost identical, but should have clearly different colours for the submit button, green for "in" and blue for "out". The form should use hidden inputs to hard code the event "sorrento_youth_sunday" and the direction, "in" or "out". It should also use a hidden input date-time, using current timestamp. The only form field for the user should be name. The page should fetch all possible names via a suitable lambda / dynamodb lookup. When the user starts typing a name, JavaScript should present auto-complete options so that only 1 of the available names can be submitted. No other names are allowed. After the user clicks the "in" or "out" submit button, a confirmation message or error message should be displayed. No other functionality is needed, other than for the page to be as simple and stylish as possible, so it is easy to use on a mobile phone browser. Can you provide lots of comments in the sample code so I can easily understand where and how to customise the application code? 

Constants to use:
API_BASE = "https://5eifrv56p8.execute-api.ap-southeast-2.amazonaws.com"
ACTIVITY_ID = "sorrento_youth_sunday"

Example function calls:
# Get logs for date
fetchLogs() {
      const response = await fetch(`${API_BASE}/log?activity_id=sorrento_youth_sunday&date=2025-08-12`)
}

# Add log
const payload = {
  activity_id: ${ACTIVITY_ID}
  name_id: name_id,
  direction: direction,
  date_time: date_time
};

const response = await fetch(`${API_BASE}/log`, {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify(payload)
});





# python adLog.python
Please create a python script using latest of python. 
This script will be executed by AWS lambda. The lambda will be called by aws api gate way and it will pass 
in a variable called 'name'. The script should append this sting to the log file 'in.log' in the aws s3 
bucket s3://micko-training2025.info. Before appending to the log, the python script should read the 
existing log file and ensure there is not already a matching log entry. 
Please add other validation to prevent malicious injection into the name variable, and return a warning if 
the entry already exists, other wise return a success code if the log entry is successfully created.

# Dynamodb terraform
I am using terraform version 1.12.2 to provision an s3 hosted website on aws. 
I plan to use aws dynamodb for the backend of this site. 
The volume of data will be tiny, less than 50Meg. And the volume of queries will also be tiny, less than 4000 queries per month. 
So I want dynamodb to be configured in a way that will use AWS free tier billing.
I will add a lambda function, API gateway and relevant IAM roles at a later time. 
Right now, I would like you to provide me with a complete terraform file to provision a dynamodb database called 'signin_website'.
The database should have 5 tables for the schema below, using the most logical column types for each of the names. 
please prompt me for clarification if an of the names do not have an obvious column type.  

# Table schemas for database 'signin_website'
Names:
id_name|filter_string
"sorrento_youth_sunday_Aidan O'Connor"|"u17"

Log:
id_name|direction_string("in"/"out")|date_time
"sorrento_youth_sunday_Aidan O'Connor"|"in"|2025-08-12 11:15:00

Activity:
id_name|url_code|days_string|in_h_start|in_m_start|in_h_end|in_m_end|out_h_start|out_m_start|out_h_end|out_m_end
"sorrento_youth_sunday"|"YOUTH"|"sunday"|8|0|9|30|9|31|10|40


i think i have a better understanding now, so I will modify my schema. Below i have outlined 3 dynamodb tables, along with the columns i plan to add and an example of 1 record for each table. can you use this schema and examples to re-write the terraform code. please organise the terraform code so that 1 table_item is inserted immediately after the table resource definition.
Names: id_name|filter_string "sorrento_youth_sunday_Aidan O'Connor"|"u17"
Log: id_name|direction_string("in"/"out")|date_time "sorrento_youth_sunday_Aidan O'Connor"|"in"|2025-08-12 11:15:00
Activity: id_name|url_code|days_string|in_h_start|in_m_start|in_h_end|in_m_end|out_h_start|out_m_start|out_h_end|out_m_end "sorrento_youth_sunday"|"YOUTH"|"sunday"|8|0|9|30|9|31|10|40

The activity table will be tiny, less than 20 records. The names table will be very small, less than 1000 records. But over time, the log table should grow to be over 100,000 records. I expect i will need to fetch log entries where the id_name starts with a pre-fix like "sorrento_youth_sunday", and also filter on date_time. what do you recommend i do given these requirments?
      
      
      const response = await fetch("https://5eifrv56p8.execute-api.ap-southeast-2.amazonaws.com/log?activity_id=sorrento_youth_sunday&date=2025-08-12");
