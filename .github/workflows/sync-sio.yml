name: Sync SIO on Merge

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      bucket-name: sign-in-out.com
      region: ap-southeast-2
      cf-distribution-id: E2DY5SRXBRDW31

    steps:
      # Step 1: Check out your repository code.
      # This action makes your code available to the workflow.
      - name: Checkout repository code
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials.
      # This action sets up the environment with your AWS credentials, which you should
      # store securely as GitHub secrets.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}

      # Step 3: Setup Node.js and inject config into index.html
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Step 4: Install dependencies
      # not currently needed, as inject-config.js uses nly standard packages.
      # if more advanced features are needed, a package.json file will be needed to 
      # list out dependencies. Otherwise, npm install will fail!
      #- name: Install dependencies
      #  run: npm install

      # Step 5 - inject config into index.html
      - name: Inject config into index.html
        run: |
          echo "Injecting config into app: index.html | live.html | history.html | bulk.html"
          cd ./web/main
          node ./inject-config.js
          node ./inject-config.js live
          node ./inject-config.js history
          node ./inject-config.js bulk

          caps=("demo" "pink" "white" "yellow" "green" "lblue" "purple" "dblue" "red")
          for c in "${caps[@]}"; do
            echo "Injecting config for $c" 
            cd ../$c
            node ./inject-config.js
            node ./inject-config.js live
            node ./inject-config.js history
            node ./inject-config.js bulk
          done

      # Step 6: Upload the site content to s3
      # The 'sync' command only uploads new or changed files.
      - name: Sync web-content to S3
        run: |
          echo "Syncing 'main' folder to s3://${{ env.bucket-name }}"
          aws s3 sync ./web/main/ s3://${{ env.bucket-name }} --delete

          echo "Syncing 'data' folder to s3://${{ env.bucket-name }}/data"
          aws s3 sync ./web/data/ s3://${{ env.bucket-name }}/data --delete

          echo "Syncing 'age-manger' folder to s3://${{ env.bucket-name }}/age-manager"
          aws s3 sync ./web/age-manager/ s3://${{ env.bucket-name }}/age-manager --delete

          caps=("demo" "pink" "white" "yellow" "green" "lblue" "purple" "dblue" "red")
          for c in "${caps[@]}"; do
            echo "Syncing '$c' folder to s3://${{ env.bucket-name }}/$c"
            aws s3 sync ./web/$c/ s3://${{ env.bucket-name }}/$c --delete
          done

      # Step 7: Invalidate CloudFront cache (optional)
      - name: Invalidate CloudFront cache
        run: |
          echo "Invalidating CloudFront cache"
          aws cloudfront create-invalidation --distribution-id ${{ env.cf-distribution-id }} --paths "/*"
          aws cloudfront create-invalidation --distribution-id ${{ env.cf-distribution-id }} --paths "/data/*"
          aws cloudfront create-invalidation --distribution-id ${{ env.cf-distribution-id }} --paths "/age-manager/*"
          caps=("demo" "pink" "white" "yellow" "green" "lblue" "purple" "dblue" "red")
          for c in "${caps[@]}"; do
            aws cloudfront create-invalidation --distribution-id ${{ env.cf-distribution-id }} --paths "/$c/*"
          done
          echo "CloudFront cache invalidated"
